/*
 * File:   MainMaster.c
 * Author: Cipri
 *
 * Created on 17 de agosto de 2023, 05:02 PM
 */

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//*****************************************************************************
// Definición e importación de librerías
//*****************************************************************************
#include <xc.h>
#include <stdlib.h>
#include <stdio.h>
#include "I2C.h"
#include "LCD.h"
#include "DHT11.h"
#include "UART.h"


#define _XTAL_FREQ 8000000
#define RS RD6
#define EN RD7
#define D4 RD2
#define D5 RD3
#define D6 RD4
#define D7 RD5
//*****************************************************************************
// Definición de variables
//*****************************************************************************
// DHT11 sensor connection (here data pin is connected to RB0)
#define DHT11_PIN      RB0
#define DHT11_PIN_DIR  TRISB0


// Definicion de Variables
// variables declaration

char Temperature[] = "Temp = 00.0 C  ";
char Humidity[]    = "RH   = 00.0 %  ";
unsigned char T_Byte1, T_Byte2, RH_Byte1, RH_Byte2, CheckSum ;

uint8_t Flama, Fuga, Gas;

int m = 0;
int Ua = 125;

char cad1 = '0';
char cad2 = '1';
char cad3 = '2';
char cad4 = '3';
char Temp[6];  // Crear una cadena para almacenar la temperatura
char Hum[6];  // Crear una cadena para almacenar la Humedad
char G [20];
char F [20];
char ValorGas [3];



// send start signal to the sensor
void Start_Signal(void) {
  DHT11_PIN_DIR = 0;     // configure DHT11_PIN as output
  DHT11_PIN = 0;         // clear DHT11_PIN output (logic 0)
 
  __delay_ms(25);        // wait 25 ms
  DHT11_PIN = 1;         // set DHT11_PIN output (logic 1)
 
  __delay_us(30);        // wait 30 us
  DHT11_PIN_DIR = 1;     // configure DHT11_PIN as input
}

// Check sensor response
__bit Check_Response() {
  TMR1H = 0;                 // reset Timer1
  TMR1L = 0;
  TMR1ON = 1;                // enable Timer1 module
 
  while(!DHT11_PIN && TMR1L < 100);  // wait until DHT11_PIN becomes high (checking of 80µs low time response)
 
  if(TMR1L > 99)                     // if response time > 99µS  ==> Response error
    return 0;                        // return 0 (Device has a problem with response)
 
  else
  {
    TMR1H = 0;               // reset Timer1
    TMR1L = 0;
 
    while(DHT11_PIN && TMR1L < 100); // wait until DHT11_PIN becomes low (checking of 80µs high time response)
 
    if(TMR1L > 99)                   // if response time > 99µS  ==> Response error
      return 0;                      // return 0 (Device has a problem with response)
 
    else
      return 1;                      // return 1 (response OK)
  }
}

// Data read function
__bit Read_Data(unsigned char* dht_data)
{
  *dht_data = 0;
 
  for(char i = 0; i < 8; i++)
  {
    TMR1H = 0;             // reset Timer1
    TMR1L = 0;
 
    while(!DHT11_PIN)      // wait until DHT11_PIN becomes high
      if(TMR1L > 100) {    // if low time > 100  ==>  Time out error (Normally it takes 50µs)
        return 1;
      }
 
    TMR1H = 0;             // reset Timer1
    TMR1L = 0;
 
    while(DHT11_PIN)       // wait until DHT11_PIN becomes low
      if(TMR1L > 100) {    // if high time > 100  ==>  Time out error (Normally it takes 26-28µs for 0 and 70µs for 1)
        return 1;          // return 1 (timeout error)
      }
 
     if(TMR1L > 50)                  // if high time > 50  ==>  Sensor sent 1
       *dht_data |= (1 << (7 - i));  // set bit (7 - i)
  }
 
  return 0;                          // return 0 (data read OK)
}

//*****************************************************************************
// Definición de funciones para que se puedan colocar después del main de lo 
// contrario hay que colocarlos todas las funciones antes del main
//*****************************************************************************
void setup(void);

//*****************************************************************************
// Main
//*****************************************************************************

void main(void)
{  
    setup();
    Lcd_Init();
    while(1)
    {
        //I2C Lectura del Pic Sensor de Gas
        I2C_Master_Start();
        I2C_Master_Write(0x51);
        Gas = I2C_Master_Read(0);
        I2C_Master_Stop();
        __delay_ms(200);
        
        //I2C Lectura del Pic Sensor de Flama 
        I2C_Master_Start();
        I2C_Master_Write(0x61);
        Flama = I2C_Master_Read(0);
        I2C_Master_Stop();
        __delay_ms(200);
        
        //UART
        if(m == 0){
            UART_Init(9600);  // initialize UART module with 9600 baud 
            UART_PutC(cad1);  // send 'c' via UART (return the received character back)
            // Convertir el valor ADC a una cadena  
            sprintf(F, "%d\n", Flama); // Incluir '\n' al final    
            // Enviar la cadena a través de UART
            for (int i = 0; F[i] != '\0'; i++) {
                TXREG = F[i];
                while (!TXSTAbits.TRMT); // Esperar a que se complete la transmisión
            }
            //*****************************************************************************
            m = 1;
        }
        else if(m == 1){
            UART_Init(9600);  // initialize UART module with 9600 baud
            UART_PutC(cad2);  // send 'c' via UART (return the received character back)
            // Convertir el valor ADC a una cadena 
            sprintf(G, "%d\n", Gas); // Incluir '\n' al final    
            // Enviar la cadena a través de UART
            for (int i = 0; G[i] != '\0'; i++) {
                TXREG = G[i];
                while (!TXSTAbits.TRMT); // Esperar a que se complete la transmisión
            }
            //*****************************************************************************
            m = 2;
        }
        else if(m == 2){
            UART_Init(9600);  // initialize UART module with 9600 baud 
            UART_PutC(cad3);  // send 'c' via UART (return the received character back)
               
            // Enviar la cadena a través de UART
            for (int i = 0; Temp[i] != '\0'; i++) {
                TXREG = Temp[i];
                while (!TXSTAbits.TRMT); // Esperar a que se complete la transmisión
            }
            //*****************************************************************************
            m = 3;
        }
        else if(m == 3){
            UART_Init(9600);  // initialize UART module with 9600 baud
            UART_PutC(cad4);  // send 'c' via UART (return the received character back)
              
            // Enviar la cadena a través de UART
            for (int i = 0; Hum[i] != '\0'; i++) {
                TXREG = Hum[i];
                while (!TXSTAbits.TRMT); // Esperar a que se complete la transmisión
            }
            //*****************************************************************************
            m = 0;
        }
     
        if(Flama == 1){
            PORTA = 0b00000001;
            __delay_ms(100);
            PORTA = 0b00000000;
            Lcd_Clear();                         // Iniciar la LCD
            Lcd_Set_Cursor(1,1);                 // Posicion del cursor
            Lcd_Write_String("FUEGO!!!!");            // Caracter a mostrar
        }
        else if(Gas > 100){
            Lcd_Clear();                         // Iniciar la LCD
            Lcd_Set_Cursor(1,1);                 // Posicion del cursor
            Lcd_Write_String("¡FUGA DE GAS!");            // Caracter a mostrar
            sprintf(ValorGas, "%d",Gas);        // Retransmitir el valor a char
            Lcd_Set_Cursor(2,1);                 // Posicion del cursor
            Lcd_Write_String(ValorGas); 
        }
        else if(Gas == 0 || Flama ==0){
            Start_Signal();     // send start signal to the sensor
 
            if(Check_Response())    // check if there is a response from sensor (If OK start reading humidity and temperature data)
            {
                
              // read (and save) data from the DHT11 sensor and check time out errors
              if(Read_Data(&RH_Byte1) || Read_Data(&RH_Byte2) || Read_Data(&T_Byte1) || Read_Data(&T_Byte2) || Read_Data(&CheckSum))
              {
                Lcd_Clear();       // clear LCD
                Lcd_Set_Cursor(5,1);           // go to column 5, row 2
                Lcd_Write_Char("Time out!");   // display "Time out!"
              }

              else         // if there is no time out error
              {
                if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xFF))
                {                                       // if there is no checksum error

                    // Calcular la temperatura en forma de cadena
                    int temperatureValue = (T_Byte1 * 10 + T_Byte2) / 10; // Calcula la temperatura en un solo valor
                    sprintf(Temp, "%4d\n", temperatureValue); // Formatea el valor en una cadena
                    int HumValue = (RH_Byte1 * 10 + RH_Byte2) / 10; // Calcula la temperatura en un solo valor
                    sprintf(Hum, "%4d\n", HumValue); // Formatea el valor en una cadena 
                    
                    Temperature[7]  = T_Byte1 / 10  + '0';
                    Temperature[8]  = T_Byte1 % 10  + '0';
                    Temperature[10] = T_Byte2 / 10  + '0';
                    Humidity[7]     = RH_Byte1 / 10 + '0';
                    Humidity[8]     = RH_Byte1 % 10 + '0';
                    Humidity[10]    = RH_Byte2 / 10 + '0';
                    Temperature[11] = 223;    // put degree symbol (°)
                    Lcd_Set_Cursor(1,1);           // go to column 1, row 1
                    Lcd_Write_String(Temperature);
                    Lcd_Set_Cursor(2,1);           // go to column 1, row 2
                    Lcd_Write_String(Humidity);
                }

                // if there is a checksum error
                else
                {
                  Lcd_Clear();       // clear LCD
                  Lcd_Set_Cursor(1,1);           // go to column 1, row 1
                  Lcd_Write_Char("Checksum Error!");
                }

              }
            }

            // if there is a response (from the sensor) problem
            else
            {
              Lcd_Clear();       // clear LCD
              Lcd_Set_Cursor(3,1);           // go to column 3, row 1
              Lcd_Write_Char("No response");
              Lcd_Set_Cursor(1,2);           // go to column 1, row 2
              Lcd_Write_Char("from the sensor");
            }

            TMR1ON = 0;        // disable Timer1 module
            __delay_ms(1000);  // wait 1 second
            
        }
    }
    return;
}
//*****************************************************************************
// Función de Inicialización
//*****************************************************************************
void setup(void){
            
    
    ANSEL = 0;            // configure all PORTB pins as digital
    ANSELH = 0;
    
    TRISB = 0b00000001;
    TRISD = 0;
    TRISA = 0;
    
    PORTA = 0;
    PORTB = 0;
    PORTD = 0;
    
    I2C_Master_Init(100000);        // Inicializar Comuncación I2C
    
    //Configuration of Timer
    OSCCONbits.IRCF = 0b111;  //Internal clock frequency 8MHz 
    OSCCONbits.SCS = 1;
    T1CON  = 0x10;        // set Timer1 clock source to internal with 1:2 prescaler (Timer1 clock = 1MHz)
    TMR1H  = 0;           // reset Timer1
    TMR1L  = 0;
    
    //UART
    //12.1.1.6 Asynchronous Transmission Set-up
    //12.1.2.8 Asynchronous Reception Set-up
    //Boud Rate = 9600 / %Error = 0.16%
    SPBRG = 12;
    SPBRGH = 0;
    BRGH = 0;   //TABLE 12-3: BAUD RATE FORMULAS
    BRG16 = 0;  //8bit boud rate generator
    //Asynchronous serial port
    SYNC = 0;
    SPEN = 1;
    //Enable transmission
    TXEN = 1;
    TXIF = 0;   //Clear flag
    //Enable reception
    CREN = 1;
}
